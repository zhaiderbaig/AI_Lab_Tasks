# -*- coding: utf-8 -*-
"""Lab3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1T7Xdh5vHs_UtY9FWTIcXDica7yCudIy2
"""

pakistan_cities = {
    'Karachi': ['Hyderabad'],
    'Hyderabad': ['Karachi', 'Sukkur'],
    'Sukkur': ['Hyderabad', 'Multan', 'Quetta'],
    'Multan': ['Sukkur', 'Lahore'],
    'Quetta': ['Sukkur'],
    'Lahore': ['Multan', 'Islamabad'],
    'Islamabad': ['Lahore', 'Peshawar'],
    'Peshawar': ['Islamabad']
}

from collections import deque

def bfs_shortest_path(graph, start, goal):
    queue = deque([[start]])
    visited = set()

    while queue:
        path = queue.popleft()
        current_city = path[-1]

        if current_city == goal:
            return path

        if current_city not in visited:
            visited.add(current_city)

            for neighbor in graph.get(current_city, []):
                new_path = list(path)
                new_path.append(neighbor)
                queue.append(new_path)

    return None


def dfs_path(graph, start, goal, path=None, visited=None):
    if path is None:
        path = []
    if visited is None:
        visited = set()

    path.append(start)
    visited.add(start)

    if start == goal:
        return path

    for neighbor in graph.get(start, []):
        if neighbor not in visited:
            result = dfs_path(graph, neighbor, goal, path.copy(), visited.copy())
            if result:
                return result

    return None


# Example testing
start_city = "Karachi"
goal_city = "Peshawar"

bfs_result = bfs_shortest_path(pakistan_cities, start_city, goal_city)
print("BFS Shortest Path from Karachi to Peshawar:", bfs_result)

dfs_result = dfs_path(pakistan_cities, start_city, goal_city)
print("DFS Path from Karachi to Peshawar:", dfs_result)